// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: search.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const searchSong = `-- name: SearchSong :many
SELECT id FROM songs
WHERE songs.name ILIKE '%' || $1 || '%'
LIMIT $2
OFFSET $3
`

type SearchSongParams struct {
	Column1 sql.NullString `json:"column_1"`
	Limit   int32          `json:"limit"`
	Offset  int32          `json:"offset"`
}

func (q *Queries) SearchSong(ctx context.Context, arg SearchSongParams) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, searchSong, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []uuid.UUID{}
	for rows.Next() {
		var id uuid.UUID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchSongsByLyrics = `-- name: SearchSongsByLyrics :many
SELECT id
FROM songs
WHERE to_tsvector('vietnamese', lyrics) @@ plainto_tsquery('vietnamese', $1)
  AND is_deleted = false
ORDER BY created_at DESC
LIMIT $2
OFFSET $3
`

type SearchSongsByLyricsParams struct {
	PlaintoTsquery string `json:"plainto_tsquery"`
	Limit          int32  `json:"limit"`
	Offset         int32  `json:"offset"`
}

func (q *Queries) SearchSongsByLyrics(ctx context.Context, arg SearchSongsByLyricsParams) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, searchSongsByLyrics, arg.PlaintoTsquery, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []uuid.UUID{}
	for rows.Next() {
		var id uuid.UUID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
