// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: search.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const searchSong = `-- name: SearchSong :many
SELECT id FROM songs
WHERE fullname ILIKE '%' || $1 || '%'
LIMIT $2
OFFSET $3
`

type SearchSongParams struct {
	Column1 sql.NullString `json:"column_1"`
	Limit   int32          `json:"limit"`
	Offset  int32          `json:"offset"`
}

func (q *Queries) SearchSong(ctx context.Context, arg SearchSongParams) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, searchSong, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []uuid.UUID{}
	for rows.Next() {
		var id uuid.UUID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchSongsByLyrics = `-- name: SearchSongsByLyrics :many
SELECT id, name, song_file, lyric_file, lyrics, is_deleted, album_id, created_at
FROM songs
WHERE lyrics_tsv @@ plainto_tsquery('vietnamese', $1)
  AND is_deleted = false
ORDER BY created_at DESC
`

type SearchSongsByLyricsRow struct {
	ID        uuid.UUID `json:"id"`
	Name      string    `json:"name"`
	SongFile  string    `json:"song_file"`
	LyricFile string    `json:"lyric_file"`
	Lyrics    string    `json:"lyrics"`
	IsDeleted bool      `json:"is_deleted"`
	AlbumID   int64     `json:"album_id"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) SearchSongsByLyrics(ctx context.Context, plaintoTsquery string) ([]SearchSongsByLyricsRow, error) {
	rows, err := q.db.QueryContext(ctx, searchSongsByLyrics, plaintoTsquery)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SearchSongsByLyricsRow{}
	for rows.Next() {
		var i SearchSongsByLyricsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.SongFile,
			&i.LyricFile,
			&i.Lyrics,
			&i.IsDeleted,
			&i.AlbumID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
