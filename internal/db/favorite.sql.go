// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: favorite.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createLikeSong = `-- name: CreateLikeSong :one
INSERT INTO favorite (
    user_id,
    song_id
) VALUES (
    $1, $2
) RETURNING user_id, song_id
`

type CreateLikeSongParams struct {
	UserID uuid.UUID `json:"user_id"`
	SongID uuid.UUID `json:"song_id"`
}

func (q *Queries) CreateLikeSong(ctx context.Context, arg CreateLikeSongParams) (Favorite, error) {
	row := q.db.QueryRowContext(ctx, createLikeSong, arg.UserID, arg.SongID)
	var i Favorite
	err := row.Scan(&i.UserID, &i.SongID)
	return i, err
}

const getFavorite = `-- name: GetFavorite :one
SELECT song_id FROM favorite WHERE user_id = $1 AND song_id = $2
`

type GetFavoriteParams struct {
	UserID uuid.UUID `json:"user_id"`
	SongID uuid.UUID `json:"song_id"`
}

func (q *Queries) GetFavorite(ctx context.Context, arg GetFavoriteParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getFavorite, arg.UserID, arg.SongID)
	var song_id uuid.UUID
	err := row.Scan(&song_id)
	return song_id, err
}

const getFavoriteSongs = `-- name: GetFavoriteSongs :many
SELECT id FROM songs as S JOIN favorite as f ON s.id = f.song_id WHERE user_id = $1 AND is_deleted != TRUE
LIMIT $2
OFFSET $3
`

type GetFavoriteSongsParams struct {
	UserID uuid.UUID `json:"user_id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) GetFavoriteSongs(ctx context.Context, arg GetFavoriteSongsParams) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, getFavoriteSongs, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []uuid.UUID{}
	for rows.Next() {
		var id uuid.UUID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unlikeSong = `-- name: UnlikeSong :exec
DELETE FROM favorite WHERE user_id = $1 AND song_id = $2
`

type UnlikeSongParams struct {
	UserID uuid.UUID `json:"user_id"`
	SongID uuid.UUID `json:"song_id"`
}

func (q *Queries) UnlikeSong(ctx context.Context, arg UnlikeSongParams) error {
	_, err := q.db.ExecContext(ctx, unlikeSong, arg.UserID, arg.SongID)
	return err
}
