// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getMe = `-- name: GetMe :one
SELECT fullname, gender, avt, role_id FROM users
WHERE username = $1
`

type GetMeRow struct {
	Fullname string `json:"fullname"`
	Gender   int32  `json:"gender"`
	Avt      string `json:"avt"`
	RoleID   int32  `json:"role_id"`
}

func (q *Queries) GetMe(ctx context.Context, username string) (GetMeRow, error) {
	row := q.db.QueryRowContext(ctx, getMe, username)
	var i GetMeRow
	err := row.Scan(
		&i.Fullname,
		&i.Gender,
		&i.Avt,
		&i.RoleID,
	)
	return i, err
}

const getUserId = `-- name: GetUserId :one
SELECT id FROM users 
WHERE username  = $1
`

func (q *Queries) GetUserId(ctx context.Context, username string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getUserId, username)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const login = `-- name: Login :one
SELECT u.id, u.username, u.password, u.fullname, u.gender, u.avt, u.role_id, u.created_at, r.name FROM users as u JOIN role as r ON u.role_id = r.id WHERE username = $1
`

type LoginRow struct {
	ID        uuid.UUID `json:"id"`
	Username  string    `json:"username"`
	Password  string    `json:"password"`
	Fullname  string    `json:"fullname"`
	Gender    int32     `json:"gender"`
	Avt       string    `json:"avt"`
	RoleID    int32     `json:"role_id"`
	CreatedAt time.Time `json:"created_at"`
	Name      string    `json:"name"`
}

func (q *Queries) Login(ctx context.Context, username string) (LoginRow, error) {
	row := q.db.QueryRowContext(ctx, login, username)
	var i LoginRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Fullname,
		&i.Gender,
		&i.Avt,
		&i.RoleID,
		&i.CreatedAt,
		&i.Name,
	)
	return i, err
}

const register = `-- name: Register :one
INSERT INTO users(
    id,
    username, 
    password,
    fullname,
    gender,
    avt,
    role_id
) VALUES (
    $1, $2, $3, $4, $5, $6, 2
) RETURNING id, username, password, fullname, gender, avt, role_id, created_at
`

type RegisterParams struct {
	ID       uuid.UUID `json:"id"`
	Username string    `json:"username"`
	Password string    `json:"password"`
	Fullname string    `json:"fullname"`
	Gender   int32     `json:"gender"`
	Avt      string    `json:"avt"`
}

func (q *Queries) Register(ctx context.Context, arg RegisterParams) (User, error) {
	row := q.db.QueryRowContext(ctx, register,
		arg.ID,
		arg.Username,
		arg.Password,
		arg.Fullname,
		arg.Gender,
		arg.Avt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Fullname,
		&i.Gender,
		&i.Avt,
		&i.RoleID,
		&i.CreatedAt,
	)
	return i, err
}
