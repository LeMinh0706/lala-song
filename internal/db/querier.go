// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"context"

	"github.com/google/uuid"
)

type Querier interface {
	AddSongGenre(ctx context.Context, arg AddSongGenreParams) (SongGenre, error)
	AddSongSinger(ctx context.Context, arg AddSongSingerParams) (SingerSong, error)
	CountAlbum(ctx context.Context) (int64, error)
	CountGenre(ctx context.Context) (int64, error)
	CountSinger(ctx context.Context) (int64, error)
	CountSingerAlbum(ctx context.Context, singerID int64) (int64, error)
	// CREATE TABLE "album" (
	//   "id" bigserial PRIMARY KEY,
	//   "name" varchar NOT NULL,
	//   "image_url" varchar NOT NULL,
	//   "is_deleted" bool NOT NULL DEFAULT false,
	//   "singer_id" bigint NOT NULL,
	//   "created_at" timestamptz NOT NULL DEFAULT (now())
	// );
	CreateAlbum(ctx context.Context, arg CreateAlbumParams) (CreateAlbumRow, error)
	CreateGenre(ctx context.Context, arg CreateGenreParams) (Genre, error)
	CreateLikeSong(ctx context.Context, arg CreateLikeSongParams) (Favorite, error)
	CreateSinger(ctx context.Context, arg CreateSingerParams) (Singer, error)
	// CREATE TABLE "songs" (
	//   "id" uuid PRIMARY KEY,
	//   "name" varchar NOT NULL,
	//   "song_file" varchar NOT NULL,
	//   "lyric_file" varchar NOT NULL,
	//   "is_deleted" bool NOT NULL DEFAULT false,
	//   "album_id" bigint NOT NULL,
	//   "created_at" timestamptz NOT NULL DEFAULT (now())
	// );
	CreateSong(ctx context.Context, arg CreateSongParams) (CreateSongRow, error)
	DeleteAlbum(ctx context.Context, id int64) error
	DeleteGenre(ctx context.Context, id int64) error
	DeleteGenreSong(ctx context.Context, genresID int64) error
	DeleteSinger(ctx context.Context, id int64) error
	DeleteSong(ctx context.Context, id uuid.UUID) error
	// SELECT u.*, r.name FROM users as u JOIN role as r ON u.role_id = r.id WHERE username = $1;
	GetAlbum(ctx context.Context, id int64) (GetAlbumRow, error)
	GetAlbumSongs(ctx context.Context, arg GetAlbumSongsParams) ([]uuid.UUID, error)
	GetFavorite(ctx context.Context, arg GetFavoriteParams) (uuid.UUID, error)
	GetFavoriteSongs(ctx context.Context, arg GetFavoriteSongsParams) ([]uuid.UUID, error)
	GetGenre(ctx context.Context, id int64) (Genre, error)
	GetGenreSongs(ctx context.Context, arg GetGenreSongsParams) ([]uuid.UUID, error)
	GetGenresWithSong(ctx context.Context, songID uuid.UUID) ([]Genre, error)
	GetListAlbum(ctx context.Context, arg GetListAlbumParams) ([]int64, error)
	GetListGenre(ctx context.Context, arg GetListGenreParams) ([]Genre, error)
	GetListSinger(ctx context.Context, arg GetListSingerParams) ([]GetListSingerRow, error)
	GetListSong(ctx context.Context, arg GetListSongParams) ([]uuid.UUID, error)
	GetMe(ctx context.Context, username string) (GetMeRow, error)
	GetSinger(ctx context.Context, id int64) (GetSingerRow, error)
	GetSingerAlbum(ctx context.Context, id int64) (int64, error)
	GetSingerAlbums(ctx context.Context, arg GetSingerAlbumsParams) ([]int64, error)
	GetSingerSongs(ctx context.Context, arg GetSingerSongsParams) ([]uuid.UUID, error)
	GetSingersWithSong(ctx context.Context, songID uuid.UUID) ([]GetSingersWithSongRow, error)
	GetSong(ctx context.Context, id uuid.UUID) (GetSongRow, error)
	GetUserId(ctx context.Context, username string) (uuid.UUID, error)
	Login(ctx context.Context, username string) (LoginRow, error)
	Register(ctx context.Context, arg RegisterParams) (User, error)
	SearchSong(ctx context.Context, arg SearchSongParams) ([]uuid.UUID, error)
	SearchSongsByLyrics(ctx context.Context, arg SearchSongsByLyricsParams) ([]uuid.UUID, error)
	UnlikeSong(ctx context.Context, arg UnlikeSongParams) error
	UpdateAlbum(ctx context.Context, arg UpdateAlbumParams) (UpdateAlbumRow, error)
	UpdateGenre(ctx context.Context, arg UpdateGenreParams) (Genre, error)
	UpdateSinger(ctx context.Context, arg UpdateSingerParams) (UpdateSingerRow, error)
}

var _ Querier = (*Queries)(nil)
