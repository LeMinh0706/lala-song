// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: singer.sql

package db

import (
	"context"
)

const countSinger = `-- name: CountSinger :one
SELECT count(id) FROM singers
`

func (q *Queries) CountSinger(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countSinger)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createSinger = `-- name: CreateSinger :one
INSERT INTO singers (
    fullname,
    image_url
) VALUES (
    $1, $2
) RETURNING id, fullname, image_url, is_deleted
`

type CreateSingerParams struct {
	Fullname string `json:"fullname"`
	ImageUrl string `json:"image_url"`
}

func (q *Queries) CreateSinger(ctx context.Context, arg CreateSingerParams) (Singer, error) {
	row := q.db.QueryRowContext(ctx, createSinger, arg.Fullname, arg.ImageUrl)
	var i Singer
	err := row.Scan(
		&i.ID,
		&i.Fullname,
		&i.ImageUrl,
		&i.IsDeleted,
	)
	return i, err
}

const getListSinger = `-- name: GetListSinger :many
SELECT id, fullname, image_url FROM singers
ORDER BY id DESC
LIMIT $1
OFFSET $2
`

type GetListSingerParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetListSingerRow struct {
	ID       int64  `json:"id"`
	Fullname string `json:"fullname"`
	ImageUrl string `json:"image_url"`
}

func (q *Queries) GetListSinger(ctx context.Context, arg GetListSingerParams) ([]GetListSingerRow, error) {
	rows, err := q.db.QueryContext(ctx, getListSinger, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetListSingerRow{}
	for rows.Next() {
		var i GetListSingerRow
		if err := rows.Scan(&i.ID, &i.Fullname, &i.ImageUrl); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSinger = `-- name: GetSinger :one
SELECT id, fullname, image_url FROM singers 
WHERE id = $1
`

type GetSingerRow struct {
	ID       int64  `json:"id"`
	Fullname string `json:"fullname"`
	ImageUrl string `json:"image_url"`
}

func (q *Queries) GetSinger(ctx context.Context, id int64) (GetSingerRow, error) {
	row := q.db.QueryRowContext(ctx, getSinger, id)
	var i GetSingerRow
	err := row.Scan(&i.ID, &i.Fullname, &i.ImageUrl)
	return i, err
}
