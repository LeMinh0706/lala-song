// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: genre.sql

package db

import (
	"context"
	"database/sql"
)

const countGenre = `-- name: CountGenre :one
SELECT count(id) FROM genres
`

func (q *Queries) CountGenre(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countGenre)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createGenre = `-- name: CreateGenre :one
INSERT INTO genres (
    name,
    image_url
) VALUES (
    $1, $2
) RETURNING id, name, image_url
`

type CreateGenreParams struct {
	Name     sql.NullString `json:"name"`
	ImageUrl string         `json:"image_url"`
}

func (q *Queries) CreateGenre(ctx context.Context, arg CreateGenreParams) (Genre, error) {
	row := q.db.QueryRowContext(ctx, createGenre, arg.Name, arg.ImageUrl)
	var i Genre
	err := row.Scan(&i.ID, &i.Name, &i.ImageUrl)
	return i, err
}

const deleteGenre = `-- name: DeleteGenre :exec
DELETE FROM genres WHERE id = $1
`

func (q *Queries) DeleteGenre(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteGenre, id)
	return err
}

const getGenre = `-- name: GetGenre :one
SELECT id, name, image_url FROM genres 
WHERE id = $1
`

func (q *Queries) GetGenre(ctx context.Context, id int64) (Genre, error) {
	row := q.db.QueryRowContext(ctx, getGenre, id)
	var i Genre
	err := row.Scan(&i.ID, &i.Name, &i.ImageUrl)
	return i, err
}

const getListGenre = `-- name: GetListGenre :many
SELECT id, name, image_url FROM genres
ORDER BY id DESC
LIMIT $1
OFFSET $2
`

type GetListGenreParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetListGenre(ctx context.Context, arg GetListGenreParams) ([]Genre, error) {
	rows, err := q.db.QueryContext(ctx, getListGenre, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Genre{}
	for rows.Next() {
		var i Genre
		if err := rows.Scan(&i.ID, &i.Name, &i.ImageUrl); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGenre = `-- name: UpdateGenre :one
UPDATE genres 
SET 
    name = COALESCE($2, fullname), 
    image_url = COALESCE($3, image_url)
WHERE id = $1
RETURNING id, name, image_url
`

type UpdateGenreParams struct {
	ID       int64          `json:"id"`
	Name     sql.NullString `json:"name"`
	ImageUrl string         `json:"image_url"`
}

func (q *Queries) UpdateGenre(ctx context.Context, arg UpdateGenreParams) (Genre, error) {
	row := q.db.QueryRowContext(ctx, updateGenre, arg.ID, arg.Name, arg.ImageUrl)
	var i Genre
	err := row.Scan(&i.ID, &i.Name, &i.ImageUrl)
	return i, err
}
